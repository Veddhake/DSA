Given the head of a singly linked list, return true if it is a 
palindrome
 or false otherwise.

 

Example 1:


Input: head = [1,2,2,1]
Output: true
Example 2:


Input: head = [1,2]
Output: false
 

Constraints:

The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9
 

Follow up: Could you do it in O(n) time and O(1) space?


class Solution {
    public boolean isPalindrome(ListNode head) {
        
        if(head==null)
        {
            return false;
        }
        if(head.next==null)
        {
            return true;
        }

        ListNode slow=head;
        ListNode fast=head;

        while(fast!=null&& fast.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
        }

        ListNode mid=slow;

        ListNode tail=rev(mid);
        ListNode temp=head;
        while(tail!=null)
        {
            if(temp.val!=tail.val)
            {
                return false;
            }

            temp=temp.next;
            tail=tail.next;
        }

        return true;

        
    }

    public ListNode rev(ListNode mid)
    {
        if(mid.next==null)
        {
            return mid;
        }

        ListNode tail= rev(mid.next);

        
        mid.next.next=mid;
        mid.next=null;

        return tail;
    }
}


*** Find middle node and reverse the second half of LL and then traverse the LL to check for palindrome
*** SELF-NOTE : Remember to write temp.val for value checking ( common oversight ) 