Given the head of a singly linked list, reverse the list, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]
Example 2:


Input: head = [1,2]
Output: [2,1]
Example 3:

Input: head = []
Output: []
 

Constraints:

The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000


class Solution {
    public ListNode reverseList(ListNode head) {
        
        if(head==null)
        {
            return null;
        }

        if(head.next==null)
        {
            return head;
        }
        ListNode j=head.next;
        ListNode i=head;
        ListNode temp;
        while(j!=null)
        {
            if(i==head)
            {
                i.next=null;
            }
             if(j.next==null)
            {
                head=j;
                j.next=i;
                return head;
            }
            temp=j.next;
            j.next=i;
            i=j;
            j=temp;
        }

        return head;

        
    }
}

*** two pointers maintain the current node and the next node. the next nodes pointer is stored in a temp and the next node points to the current node. then the current node becomes the next node and the next node becomes temp.