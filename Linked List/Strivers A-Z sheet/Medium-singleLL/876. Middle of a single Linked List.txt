Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.
Example 2:


Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
 

Constraints:

The number of nodes in the list is in the range [1, 100].
1 <= Node.val <= 100

My Solution:

class Solution {
    public ListNode middleNode(ListNode head) {

        int i=1;
        int j=1; 

        ListNode ni=head;
        ListNode nj=head;

        while(nj!=null)
        {
            if(i<=j/2)
            {
                ni=ni.next;
                i++;
            }
            nj=nj.next;
            j++;

        }

        return ni;
        
        
    }
}

*** it incorporates a two-pointer approach one pointer traverses the entire list and the other pointer is being updated as the pointer j is incrementing


Another solution incorporating fast and slow pointers

public ListNode middleNode(ListNode head) {
        ListNode slow = head, fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }


*** here there are 2 pointers one slow and one fast and the slow pointer is incremented once while fast is incremented twice and the while loop checks for the edge cases so that the fast doesn't point to a null exception.
*** use the slow and fast pointer approach always 
